@startuml
'https://plantuml.com/sequence-diagram

autonumber
actor developer
developer -> Program: 启动服务器
Program -> GameServer: 实例化GameServer
GameServer --> Program: 返回实例
Program -> GameServer: Init()，初始化
GameServer -> NetService: 实例化
NetService --> GameServer: 返回实例
GameServer -> NetService: 传入port，初始化
NetService -> TcpSocketListener: 传入address、port、backlog，监听给定的地址和端口\n注册异步接受完成委托
note left
backlog:
backlog用来确定已完成队列（完成三次握手等待accept）的长度，
而不再是已完成队列和未完成连接队列之和（linux 2.2之前）
end note
TcpSocketListener --> NetService: 返回实例
NetService --> GameServer: 返回true
Program -> GameServer: Start
GameServer -> NetService: 启动监听和消息处理器
NetService -> TcpSocketListener: 开始侦听套接字连接
TcpSocketListener -> TcpSocketListener: 使用指定的地址族、套接字类型和协议初始化Socket类的新实例
note left
地址族：IPv4的地址
套接字类型：Stream
协议：传输控制协议(TCP)
end note
TcpSocketListener -> TcpSocketListener: Bind，绑定EndPoint(address + port)
TcpSocketListener -> TcpSocketListener: Listen，将Socket置于侦听状态
TcpSocketListener -> TcpSocketListener: Accept, 异步侦听新连接
NetService -> MessageDistributer: 启动消息处理器
MessageDistributer -> MessageDistributer: 置Running为true
MessageDistributer -> MessageDistributer: 启用多个消息处理线程
note left
消息处理线程：
	while(Running):
		if 消息队列为空:
			等待信号
		else:
			移除并返回队首的包
			分发队首的包
end note

@enduml